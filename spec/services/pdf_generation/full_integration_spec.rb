# frozen_string_literal: true

require "rails_helper"
require "base64"

RSpec.describe "PDF Generation Integration Tests", type: :service do
  describe "Ferrum PDF Generation" do
    let(:company) { create(:company, name: "Test Company") }
    let(:client) { create(:client, company: company, name: "Test Client") }
    let(:invoice) do
      create(:invoice,
        client: client,
        company: company,
        invoice_number: "INV-TEST-001",
        issue_date: Date.current,
        due_date: Date.current + 30.days,
        amount: 5000.00,
        tax: 500.00,
        discount: 100.00,
        amount_due: 5400.00,
        amount_paid: 0.00,
        currency: "USD"
      )
    end

    before do
      # Create some invoice line items
      create(:invoice_line_item,
        invoice: invoice,
        name: "Web Development",
        description: "Full-stack development services",
        date: Date.current,
        quantity: 2400, # 40 hours in minutes
        rate: 100
      )

      create(:invoice_line_item,
        invoice: invoice,
        name: "Design Services",
        description: "UI/UX design and consultation",
        date: Date.current,
        quantity: 1200, # 20 hours in minutes
        rate: 80
      )
    end

    describe PdfGeneration::BaseService do
      it "generates a valid PDF from HTML content" do
        html = <<~HTML
          <!DOCTYPE html>
          <html>
          <head>
            <title>Test PDF</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              h1 { color: #333; }
            </style>
          </head>
          <body>
            <h1>Test PDF Generation</h1>
            <p>This is a test PDF generated by Ferrum</p>
            <p>Date: #{Date.current}</p>
          </body>
          </html>
        HTML

        service = PdfGeneration::BaseService.new(html)
        pdf_data = service.process

        # Verify it's a valid PDF
        expect(pdf_data).to be_present
        expect(pdf_data.encoding).to eq(Encoding::ASCII_8BIT)
        expect(pdf_data[0..3]).to eq("%PDF")
        expect(pdf_data).to include("EOF")

        # Verify size is reasonable (at least 1KB)
        expect(pdf_data.bytesize).to be > 1000
      end

      it "handles custom PDF options" do
        html = "<html><body><h1>Custom Options Test</h1></body></html>"
        options = {
          format: "A4",
          landscape: true,
          margin: { top: 10, bottom: 10, left: 10, right: 10 }
        }

        service = PdfGeneration::BaseService.new(html, options)
        pdf_data = service.process

        expect(pdf_data).to be_present
        expect(pdf_data[0..3]).to eq("%PDF")
      end

      it "handles special characters and unicode" do
        html = <<~HTML
          <html>
          <head><meta charset="UTF-8"></head>
          <body>
            <h1>Special Characters: €$£¥</h1>
            <p>Unicode: 你好世界 こんにちは мир</p>
            <p>Symbols: ™®©℗</p>
          </body>
          </html>
        HTML

        service = PdfGeneration::BaseService.new(html)
        expect { service.process }.not_to raise_error

        pdf_data = service.process
        expect(pdf_data[0..3]).to eq("%PDF")
      end
    end

    describe PdfGeneration::InvoiceService do
      let(:logo_url) { "https://example.com/logo.png" }
      let(:root_url) { "http://localhost:3000" }

      before do
        # Mock the template rendering with realistic HTML
        allow_any_instance_of(ActionController::Base).to receive(:render_to_string) do |_, args|
          invoice_data = args[:locals][:invoice]
          <<~HTML
            <!DOCTYPE html>
            <html>
            <head>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { margin-bottom: 30px; }
                .invoice-number { font-size: 24px; font-weight: bold; }
                .line-items { width: 100%; border-collapse: collapse; }
                .line-items th, .line-items td { padding: 10px; border-bottom: 1px solid #ddd; }
                .total { margin-top: 20px; font-weight: bold; font-size: 18px; }
              </style>
            </head>
            <body>
              <div class="header">
                <h1 class="invoice-number">Invoice ##{invoice_data.invoice_number}</h1>
                <p>Company: #{invoice_data.company.name}</p>
                <p>Client: #{invoice_data.client.name}</p>
                <p>Date: #{invoice_data.issue_date}</p>
                <p>Due Date: #{invoice_data.due_date}</p>
              </div>
            #{'  '}
              <table class="line-items">
                <thead>
                  <tr>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Rate</th>
                    <th>Amount</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Web Development</td>
                    <td>40 hours</td>
                    <td>$100/hour</td>
                    <td>$4,000.00</td>
                  </tr>
                  <tr>
                    <td>Design Services</td>
                    <td>20 hours</td>
                    <td>$80/hour</td>
                    <td>$1,600.00</td>
                  </tr>
                </tbody>
              </table>
            #{'  '}
              <div class="total">
                <p>Subtotal: $5,000.00</p>
                <p>Tax: $500.00</p>
                <p>Discount: -$100.00</p>
                <p>Total Due: $5,400.00</p>
              </div>
            </body>
            </html>
          HTML
        end
      end

      it "generates a valid invoice PDF" do
        service = PdfGeneration::InvoiceService.new(invoice, logo_url, root_url)
        pdf_data = service.process

        # Verify PDF structure
        expect(pdf_data).to be_present
        expect(pdf_data[0..3]).to eq("%PDF")
        expect(pdf_data).to include("EOF")

        # Verify reasonable size (invoice PDFs are typically 50KB-200KB)
        expect(pdf_data.bytesize).to be_between(10_000, 500_000)

        # Save for manual inspection if needed
        if ENV["SAVE_TEST_PDFS"]
          File.binwrite("/tmp/test_invoice_#{invoice.invoice_number}.pdf", pdf_data)
          puts "Saved test PDF to /tmp/test_invoice_#{invoice.invoice_number}.pdf"
        end
      end

      it "generates consistent PDFs for the same invoice" do
        service1 = PdfGeneration::InvoiceService.new(invoice, logo_url, root_url)
        service2 = PdfGeneration::InvoiceService.new(invoice, logo_url, root_url)

        pdf1 = service1.process
        pdf2 = service2.process

        # PDFs should have the same structure (though metadata might differ)
        expect(pdf1[0..3]).to eq(pdf2[0..3])
        expect(pdf1.bytesize).to be_within(1000).of(pdf2.bytesize)
      end

      it "handles missing optional parameters" do
        service = PdfGeneration::InvoiceService.new(invoice, nil, nil)
        pdf_data = service.process

        expect(pdf_data).to be_present
        expect(pdf_data[0..3]).to eq("%PDF")
      end

      it "processes all invoice line items" do
        # Add more line items
        3.times do |i|
          create(:invoice_line_item,
            invoice: invoice,
            name: "Service #{i + 3}",
            description: "Additional service",
            quantity: 600,
            rate: 50
          )
        end

        service = PdfGeneration::InvoiceService.new(invoice, logo_url, root_url)
        pdf_data = service.process

        # More line items should result in a larger PDF
        expect(pdf_data.bytesize).to be > 10_000
      end
    end

    describe InvoicePayment::PdfGeneration do
      let(:logo_url) { "https://example.com/logo.png" }
      let(:root_url) { "http://localhost:3000" }

      before do
        # Mock the template rendering
        allow_any_instance_of(ActionController::Base).to receive(:render_to_string)
          .and_return("<html><body><h1>Invoice Payment PDF</h1></body></html>")
      end

      it "generates PDF using InvoiceService and returns data" do
        service = InvoicePayment::PdfGeneration.new(invoice, logo_url, root_url)
        pdf_data = service.process

        expect(pdf_data).to be_present
        expect(pdf_data[0..3]).to eq("%PDF")
      end

      it "saves PDF to file when filepath is provided" do
        filepath = Rails.root.join("tmp", "test_payment_invoice.pdf")

        begin
          service = InvoicePayment::PdfGeneration.new(invoice, logo_url, root_url, filepath)
          pdf_data = service.process

          expect(File.exist?(filepath)).to be true

          # Verify the saved file is a valid PDF
          saved_data = File.binread(filepath)
          expect(saved_data).to eq(pdf_data)
          expect(saved_data[0..3]).to eq("%PDF")
        ensure
          File.delete(filepath) if File.exist?(filepath)
        end
      end

      it "creates nested directories when saving to file" do
        nested_path = Rails.root.join("tmp", "nested", "dirs", "invoice.pdf")

        begin
          service = InvoicePayment::PdfGeneration.new(invoice, logo_url, root_url, nested_path)
          service.process

          expect(File.exist?(nested_path)).to be true
        ensure
          FileUtils.rm_rf(Rails.root.join("tmp", "nested"))
        end
      end
    end

    describe "Reports PDF Generation" do
      it "generates a valid report PDF" do
        html = <<~HTML
          <!DOCTYPE html>
          <html>
          <head>
            <title>Report</title>
            <style>
              body { font-family: Arial, sans-serif; }
              table { width: 100%; border-collapse: collapse; }
              th, td { padding: 8px; border: 1px solid #ddd; }
              th { background-color: #f4f4f4; }
            </style>
          </head>
          <body>
            <h1>Time Entry Report</h1>
            <p>Period: #{Date.current.beginning_of_month} - #{Date.current.end_of_month}</p>
          #{'  '}
            <table>
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Client</th>
                  <th>Project</th>
                  <th>Hours</th>
                  <th>Amount</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>#{Date.current}</td>
                  <td>Test Client</td>
                  <td>Test Project</td>
                  <td>8.0</td>
                  <td>$800.00</td>
                </tr>
              </tbody>
            </table>
          #{'  '}
            <p>Total Hours: 8.0</p>
            <p>Total Amount: $800.00</p>
          </body>
          </html>
        HTML

        service = PdfGeneration::BaseService.new(html)
        pdf_data = service.process

        expect(pdf_data).to be_present
        expect(pdf_data[0..3]).to eq("%PDF")
        expect(pdf_data.bytesize).to be > 1000
      end
    end

    describe "Performance and Resource Management" do
      it "properly cleans up browser resources" do
        # This test ensures the browser is properly closed after PDF generation
        service = PdfGeneration::BaseService.new("<html><body>Test</body></html>")

        expect_any_instance_of(Ferrum::Browser).to receive(:quit)
        service.process
      end

      it "handles browser timeout gracefully" do
        # Mock a timeout scenario
        allow_any_instance_of(Ferrum::Browser).to receive(:go_to)
          .and_raise(Ferrum::TimeoutError, "Navigation timeout")

        service = PdfGeneration::BaseService.new("<html><body>Test</body></html>")

        expect { service.process }.to raise_error(Ferrum::TimeoutError)
      end

      it "generates multiple PDFs sequentially without issues" do
        5.times do |i|
          html = "<html><body><h1>PDF #{i + 1}</h1></body></html>"
          service = PdfGeneration::BaseService.new(html)
          pdf_data = service.process

          expect(pdf_data[0..3]).to eq("%PDF")
        end
      end
    end
  end
end
