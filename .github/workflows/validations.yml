name: CI Test Suite
on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
    types: [labeled, opened, synchronize, reopened]
  workflow_dispatch:

# Cancel in-progress runs on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Running tests
    runs-on: ubuntu-latest  # Standard runner (4-cores not available)
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        ci_node_index: [0]
        ci_node_total: [1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PostgreSQL
        uses: Harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: 16
          postgresql db: miru_web_test
          postgresql user: root
          postgresql password: "password"
      
      # Chrome/ChromeDriver not needed with Playwright
      
      - name: Start Xvfb
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'
          bundler-cache: true
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            node_modules/.cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      - name: Cache Playwright Chromium browser
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
      
      - name: Install pnpm packages
        run: |
          PUPPETEER_SKIP_DOWNLOAD=true pnpm install --frozen-lockfile
      
      - name: Install Playwright Chromium browser (with deps)
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps chromium
      
      - name: Install Playwright Chromium browser deps only
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm exec playwright install-deps chromium
      
      - name: Run Rubocop
        if: matrix.ci_node_index == 0
        run: bundle exec rubocop
      
      - name: Run ESLint
        if: matrix.ci_node_index == 0
        run: pnpm lint
      
      - name: Setup test database
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
          CI_NODE_INDEX: ${{ matrix.ci_node_index }}
          CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:migrate
      
      - name: Enable PostgreSQL extensions
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
        run: |
          bundle exec rails runner "ActiveRecord::Base.connection.execute('CREATE EXTENSION IF NOT EXISTS pg_trgm')"
          bundle exec rails runner "ActiveRecord::Base.connection.execute('CREATE EXTENSION IF NOT EXISTS unaccent')"
      
      - name: Run parallel tests (excluding system specs)
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
          CI_NODE_INDEX: ${{ matrix.ci_node_index }}
          CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          PARALLEL_TEST_PROCESSORS: 2  # Optimal for standard runners
          CI: true
          TEST_STACK_PROF: 1
          TEST_PROF_FACTORY_DEFAULT: build
          TEST_PROF_FACTORY_DOCTOR: 1
          TEST_PROF_RB_PROF: 1
          TEST_PROF_BEFORE_ALL: 1
        run: |
          mkdir -p tmp tmp/test-prof
          
          # Run all specs in a single container (no sharding)
          bundle exec rspec \
            --exclude-pattern "spec/system/**/*_spec.rb" \
            --format progress --format RspecJunitFormatter --out tmp/rspec.xml \
            --tag ~type:system || echo "Tests failed with exit code $?"
          
          # Save profiling results if available
          if [ -d tmp/test-prof ]; then
            echo "Test profiling results:"
            ls -la tmp/test-prof/
          fi
          
          # Also save failed specs list for debugging
          if [ -f tmp/failing_specs.txt ]; then
            echo "Failed specs:"
            cat tmp/failing_specs.txt
          fi
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.ci_node_index }}
          path: |
            tmp/rspec_*.xml
            tmp/rspec*.xml
            tmp/capybara/*.png
            tmp/failing_specs.txt
            log/test.log
          if-no-files-found: warn

  playwright-tests:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        shard: [1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PostgreSQL
        uses: Harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: 16
          postgresql db: miru_web_test
          postgresql user: root
          postgresql password: "password"
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'
          bundler-cache: true
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            node_modules/.cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      - name: Install pnpm packages
        run: |
          PUPPETEER_SKIP_DOWNLOAD=true pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: |
          # Only install Chromium for CI to save time
          pnpm exec playwright install chromium
          pnpm exec playwright install-deps chromium
      
      - name: Setup test database
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:migrate
          bundle exec rails db:seed
      
      - name: Enable PostgreSQL extensions
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
        run: |
          bundle exec rails runner "ActiveRecord::Base.connection.execute('CREATE EXTENSION IF NOT EXISTS pg_trgm')"
          bundle exec rails runner "ActiveRecord::Base.connection.execute('CREATE EXTENSION IF NOT EXISTS unaccent')"
      
      - name: Build assets
        run: |
          bin/vite build
      
      - name: Start Rails server
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
          SECRET_KEY_BASE: test-secret-key-base-for-ci-testing
          RAILS_SERVE_STATIC_FILES: true
        run: |
          # Start Rails server in background
          bundle exec rails server -p 3000 -b 0.0.0.0 &
          echo "Waiting for Rails server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/users/sign_in > /dev/null; then
              echo "Rails server is ready!"
              break
            fi
            echo "Waiting for server... attempt $i/30"
            sleep 2
          done
          # Final check
          curl -I http://localhost:3000/users/sign_in || (echo "Rails server failed to start" && exit 1)
      
      - name: Run Playwright tests
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
          CI: true
          BASE_URL: http://localhost:3000
        run: |
          pnpm exec playwright test --project=chromium --reporter=dot
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-shard-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'
          bundler-cache: true
      
      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.gem
            ~/.bundle
          key: ${{ runner.os }}-security-tools-${{ hashFiles('.ruby-version') }}
          restore-keys: |
            ${{ runner.os }}-security-tools-
      
      - name: Run bundler-audit
        run: |
          gem install bundler-audit
          bundle audit check --update
      
      - name: Run brakeman
        run: |
          gem install brakeman
          brakeman -q -w2