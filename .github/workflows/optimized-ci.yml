name: Optimized CI Pipeline

on:
  push:
    branches: [develop, main]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUBY_VERSION: '3.4.5'
  NODE_VERSION: '22'
  POSTGRES_VERSION: '16'
  PNPM_VERSION: '9'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      docker: ${{ steps.filter.outputs.docker }}
      tests: ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'app/**/*.rb'
              - 'lib/**/*.rb'
              - 'db/**/*'
              - 'config/**/*'
              - 'Gemfile*'
            frontend:
              - 'app/javascript/**/*'
              - 'app/assets/**/*'
              - 'package*.json'
              - 'pnpm-lock.yaml'
              - 'vite.config.ts'
            docker:
              - 'Dockerfile*'
              - '.devcontainer/**/*'
              - 'docker-compose*.yml'
            tests:
              - 'spec/**/*'
              - 'playwright/**/*'

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        task: [rubocop, eslint, security]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Ruby
        if: matrix.task != 'eslint'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      
      - name: Setup Node
        if: matrix.task == 'eslint'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        if: matrix.task == 'eslint'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        if: matrix.task == 'eslint'
        run: pnpm install --frozen-lockfile
      
      - name: Run Rubocop
        if: matrix.task == 'rubocop'
        run: bundle exec rubocop --parallel
      
      - name: Run ESLint
        if: matrix.task == 'eslint'
        run: pnpm lint
      
      - name: Security Audit
        if: matrix.task == 'security'
        run: |
          gem install bundler-audit
          bundle audit check --update
          gem install brakeman
          brakeman -q -w2

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        ci_node_index: [0, 1]
        ci_node_total: [2]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: root
          POSTGRES_DB: miru_web_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Ruby with Cache
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-
      
      - name: Install JS dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Setup test database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://root:password@localhost:5432/miru_web_test
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:migrate
      
      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://root:password@localhost:5432/miru_web_test
          CI_NODE_INDEX: ${{ matrix.ci_node_index }}
          CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          PARALLEL_TEST_PROCESSORS: 2
        run: |
          NODE_GROUP=$((${CI_NODE_INDEX} + 1))
          bundle exec parallel_rspec spec \
            --exclude-pattern "spec/system/**/*_spec.rb" \
            -o "--format progress --format RspecJunitFormatter --out tmp/rspec_${CI_NODE_INDEX}.xml" \
            --only-group ${NODE_GROUP}/${CI_NODE_TOTAL}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.ci_node_index }}
          path: tmp/rspec_*.xml
          retention-days: 7

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: root
          POSTGRES_DB: miru_web_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright
        run: pnpm exec playwright install chromium --with-deps
      
      - name: Setup database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://root:password@localhost:5432/miru_web_test
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:seed
      
      - name: Build assets
        run: bin/vite build
      
      - name: Start Rails server
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://root:password@localhost:5432/miru_web_test
          SECRET_KEY_BASE: test-secret
          RAILS_SERVE_STATIC_FILES: true
        run: |
          bundle exec rails server -p 3000 -b 0.0.0.0 &
          timeout 30 bash -c 'until curl -s http://localhost:3000/health; do sleep 1; done'
      
      - name: Run Playwright tests
        env:
          CI: true
          BASE_URL: http://localhost:3000
        run: |
          pnpm exec playwright test \
            --project=chromium \
            --reporter=blob \
            --shard=${{ matrix.shard }}/2
      
      - name: Upload blob report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shard }}
          path: blob-report
          retention-days: 1

  merge-reports:
    name: Merge Test Reports
    if: always()
    needs: [test-e2e]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true
      
      - name: Merge reports
        run: npx playwright merge-reports --reporter html ./all-blob-reports
      
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 30

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.docker == 'true' || github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.devcontainer/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

  report:
    name: Test Summary
    if: always()
    needs: [lint, test-backend, test-e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## CI Results" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.test-e2e.result }}" >> $GITHUB_STEP_SUMMARY