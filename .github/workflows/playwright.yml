name: Playwright Tests
on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

# Cancel in-progress runs on same branch
concurrency:
  group: playwright-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PostgreSQL
        uses: Harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: 16
          postgresql db: miru_web_test
          postgresql user: root
          postgresql password: "password"
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'
          bundler-cache: true
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            node_modules/.cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      - name: Install dependencies
        run: |
          PUPPETEER_SKIP_DOWNLOAD=true pnpm install --frozen-lockfile
      
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      
      - name: Setup test database
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:migrate
          bundle exec rails db:seed
      
      - name: Enable PostgreSQL extensions
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
        run: |
          bundle exec rails runner "ActiveRecord::Base.connection.execute('CREATE EXTENSION IF NOT EXISTS pg_trgm')"
          bundle exec rails runner "ActiveRecord::Base.connection.execute('CREATE EXTENSION IF NOT EXISTS unaccent')"
      
      - name: Build assets
        run: bin/vite build
      
      - name: Start Rails server
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASS: password
        run: |
          bundle exec rails server -p 3000 -d
          echo "Waiting for Rails server to start..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:3000 > /dev/null; then
              echo "Rails server is ready!"
              break
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 2
          done
          curl -I http://127.0.0.1:3000 || (echo "Rails server failed to start" && exit 1)
      
      - name: Run Playwright tests
        env:
          CI: true
        run: pnpm test:e2e
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      
      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/
          retention-days: 7