#!/bin/bash
set -e

echo "🔐 1Password Secret Setup for Miru 2.0 Upgrade"
echo "==============================================="
echo ""

# Check if 1Password CLI is installed
if ! command -v op &> /dev/null; then
  echo "❌ 1Password CLI not found. Installing..."
  brew install --cask 1password-cli
fi

echo "✅ 1Password CLI is installed"
echo ""

# Sign in to 1Password
echo "📝 Signing in to 1Password..."
echo "If prompted, enter your 1Password account details."
echo ""

if ! op account list 2>/dev/null | grep -q "saeloun"; then
  echo "Please sign in to your 1Password account:"
  op signin
else
  echo "✅ Already signed in to 1Password"
fi

# Create vault if it doesn't exist
echo ""
echo "🗂️  Setting up 1Password vault..."

VAULT_NAME="Infrastructure"
ITEM_NAME="miru-2-0-upgrade"

# Check if vault exists
if ! op vault get "$VAULT_NAME" 2>/dev/null; then
  echo "Creating vault: $VAULT_NAME"
  op vault create "$VAULT_NAME"
fi

# Load current environment variables
if [ -f ".env.kamal.local" ]; then
  export $(cat .env.kamal.local | grep -v '^#' | xargs)
fi

# Create or update the 1Password item
echo "Creating/updating 1Password item: $ITEM_NAME"

# Generate secure passwords if not set
POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-$(openssl rand -hex 32)}
SECRET_KEY_BASE=${SECRET_KEY_BASE:-$(openssl rand -hex 64)}
RAILS_MASTER_KEY=$(cat config/master.key 2>/dev/null || echo "GENERATE_NEW_MASTER_KEY")

# Create a JSON template for the 1Password item
cat > /tmp/1pass-item.json << EOF
{
  "title": "$ITEM_NAME",
  "vault": {
    "name": "$VAULT_NAME"
  },
  "category": "SERVER",
  "fields": [
    {
      "id": "KAMAL_REGISTRY_PASSWORD",
      "type": "CONCEALED",
      "label": "GitHub Token",
      "value": "$GITHUB_TOKEN"
    },
    {
      "id": "RAILS_MASTER_KEY", 
      "type": "CONCEALED",
      "label": "Rails Master Key",
      "value": "$RAILS_MASTER_KEY"
    },
    {
      "id": "SECRET_KEY_BASE",
      "type": "CONCEALED", 
      "label": "Secret Key Base",
      "value": "$SECRET_KEY_BASE"
    },
    {
      "id": "DATABASE_URL",
      "type": "CONCEALED",
      "label": "Database URL",
      "value": "postgresql://miru_2_0_upgrade:$POSTGRES_PASSWORD@localhost:5432/miru_2_0_upgrade"
    },
    {
      "id": "POSTGRES_PASSWORD",
      "type": "CONCEALED",
      "label": "PostgreSQL Password", 
      "value": "$POSTGRES_PASSWORD"
    },
    {
      "id": "AWS_ACCESS_KEY_ID",
      "type": "STRING",
      "label": "AWS Access Key",
      "value": "${AWS_ACCESS_KEY_ID:-}"
    },
    {
      "id": "AWS_SECRET_ACCESS_KEY",
      "type": "CONCEALED",
      "label": "AWS Secret Key",
      "value": "${AWS_SECRET_ACCESS_KEY:-}"
    },
    {
      "id": "AWS_REGION",
      "type": "STRING",
      "label": "AWS Region",
      "value": "${AWS_REGION:-us-east-1}"
    },
    {
      "id": "AWS_BUCKET",
      "type": "STRING",
      "label": "AWS S3 Bucket",
      "value": "${AWS_BUCKET:-miru-2-0-upgrade}"
    },
    {
      "id": "STRIPE_API_KEY",
      "type": "CONCEALED",
      "label": "Stripe API Key",
      "value": "${STRIPE_API_KEY:-}"
    },
    {
      "id": "STRIPE_PUBLISHABLE_KEY",
      "type": "STRING",
      "label": "Stripe Publishable Key",
      "value": "${STRIPE_PUBLISHABLE_KEY:-}"
    },
    {
      "id": "SENTRY_DSN",
      "type": "STRING",
      "label": "Sentry DSN",
      "value": "${SENTRY_DSN:-}"
    },
    {
      "id": "GOOGLE_OAUTH_CLIENT_ID",
      "type": "STRING",
      "label": "Google OAuth Client ID",
      "value": "${GOOGLE_OAUTH_CLIENT_ID:-}"
    },
    {
      "id": "GOOGLE_OAUTH_CLIENT_SECRET",
      "type": "CONCEALED",
      "label": "Google OAuth Client Secret",
      "value": "${GOOGLE_OAUTH_CLIENT_SECRET:-}"
    }
  ],
  "sections": [
    {
      "id": "deployment",
      "label": "Deployment"
    },
    {
      "id": "database",
      "label": "Database"
    },
    {
      "id": "aws",
      "label": "AWS"
    },
    {
      "id": "services",
      "label": "External Services"
    }
  ]
}
EOF

# Check if item exists and create/update accordingly
if op item get "$ITEM_NAME" --vault "$VAULT_NAME" 2>/dev/null; then
  echo "Updating existing 1Password item..."
  op item edit "$ITEM_NAME" --vault "$VAULT_NAME" < /tmp/1pass-item.json
else
  echo "Creating new 1Password item..."
  op item create --template /tmp/1pass-item.json
fi

rm /tmp/1pass-item.json

echo ""
echo "✅ 1Password secrets configured!"
echo ""
echo "To use 1Password with Kamal, uncomment the 1Password section in .kamal/secrets"
echo ""
echo "Test your 1Password integration:"
echo "  op read 'op://$VAULT_NAME/$ITEM_NAME/RAILS_MASTER_KEY'"
echo ""
echo "You can now deploy using:"
echo "  kamal deploy"
echo ""